import{_ as e,o as s,c as a,O as t}from"./chunks/framework.a4d18f8e.js";const y=JSON.parse('{"title":"Defining Routes","description":"","frontmatter":{},"headers":[],"relativePath":"guide/defining-routes.md","filePath":"guide/defining-routes.md"}'),o={name:"guide/defining-routes.md"},n=t(`<h1 id="defining-routes" tabindex="-1">Defining Routes <a class="header-anchor" href="#defining-routes" aria-label="Permalink to &quot;Defining Routes&quot;">​</a></h1><p>This page will guide you through how to define and organize routes in your Next.js application.</p><h2 id="creating-routes" tabindex="-1">Creating Routes <a class="header-anchor" href="#creating-routes" aria-label="Permalink to &quot;Creating Routes&quot;">​</a></h2><p>Vite Router Next uses a file-system based router where <strong>folders</strong> are used to define routes.</p><p>Each folder represents a <strong>route</strong> segment that maps to a URL segment. To create a nested route, you can nest folders inside each other.</p><p>A special <code>page.js</code> file is used to make route segments publicly accessible.</p><p>For example, the following folder structure:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">└── pages</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── page.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── user</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── page.tsx</span></span></code></pre></div><p>Will generate the following routes:</p><ul><li><code>/</code></li><li><code>/user</code></li></ul><div class="tip custom-block" style="padding-top:8px;"><p><strong>Good to know:</strong> <code>.js</code>, <code>.jsx</code>, or <code>.tsx</code> file extensions can be used for special files.</p></div><h2 id="creating-ui" tabindex="-1">Creating UI <a class="header-anchor" href="#creating-ui" aria-label="Permalink to &quot;Creating UI&quot;">​</a></h2><p>The most common are <a href="./pages-and-layouts.html#pages">pages</a> to show UI unique to a route, and <a href="./pages-and-layouts.html#layouts">layouts</a> to show UI that is shared across multiple routes.</p><p>For example, to create your first page, add a <code>page.tsx</code> file inside the <code>/pages</code> directory and export a React component:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-TWcl8" id="tab-4lQt-3b" checked="checked"><label for="tab-4lQt-3b">pages/page.tsx</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IndexPage</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, Vite Router Next!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div>`,15),l=[n];function p(r,i,c,d,u,g){return s(),a("div",null,l)}const f=e(o,[["render",p]]);export{y as __pageData,f as default};
