import{_ as s,o as e,c as a,O as t}from"./chunks/framework.a4d18f8e.js";const D=JSON.parse('{"title":"Pages and Layouts","description":"","frontmatter":{},"headers":[],"relativePath":"guide/pages-and-layouts.md","filePath":"guide/pages-and-layouts.md"}'),o={name:"guide/pages-and-layouts.md"},n=t(`<h1 id="pages-and-layouts" tabindex="-1">Pages and Layouts <a class="header-anchor" href="#pages-and-layouts" aria-label="Permalink to &quot;Pages and Layouts&quot;">​</a></h1><p>Vite Router Next has two file conventions, <code>layout.[jt]sx</code> and <code>page.[jt]sx</code> (abbreviated as <code>.tsx</code>). These two files determine the layout structure of the application. <code>layout.tsx</code> is used as the <strong>layout component</strong>, and <code>page.tsx</code> acts as the <strong>page component</strong>, which is the leaf node of the entire route (a route has only one leaf node and must end with a leaf node).</p><h2 id="pages" tabindex="-1">Pages <a class="header-anchor" href="#pages" aria-label="Permalink to &quot;Pages&quot;">​</a></h2><p>A page is UI that is <strong>unique</strong> to a route. You can define pages by exporting a component from a <code>page.[jt]sx</code> file. Use nested folders to define a route and a <code>page.[jt]sx</code> file to make the route publicly accessible.</p><p>Create your first page by adding a <code>page.[jt]sx</code> file inside the app directory:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-NUfL0" id="tab-rcM67Gz" checked="checked"><label for="tab-rcM67Gz">pages/page.tsx</label><input type="radio" name="group-NUfL0" id="tab-j3OfvP9"><label for="tab-j3OfvP9">pages/admin/page.tsx</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IndexPage</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, Vite Router Next!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AdminIndexPage</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, Admin Index Page!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><div class="tip custom-block" style="padding-top:8px;"><p><strong>Good to know:</strong></p><ul><li>A page is always the leaf of the route subtree.</li><li><code>.js</code>, <code>.jsx</code>, or <code>.tsx</code> file extensions can be used for Pages.</li><li>A <code>page.js</code> file is required to make a route segment publicly accessible.</li><li>Pages can fetch data. View the <a href="./data-fetching.html">Data Fetching</a> section for more information.</li></ul></div><h2 id="layouts" tabindex="-1">Layouts <a class="header-anchor" href="#layouts" aria-label="Permalink to &quot;Layouts&quot;">​</a></h2><p>A layout is UI that is <strong>shared</strong> between multiple pages. On navigation, layouts preserve state, remain interactive, and do not re-render. Layouts can also be nested.</p><p>The <code>&lt;Layout&gt;</code> component refers to all <code>layout.tsx</code> files under the <code>pages/</code> directory. They represent the layout of the corresponding route segment and use <code>&lt;Outlet&gt;</code> (<strong>React Router</strong> component) to represent child components.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-I48Mf" id="tab-xzL6huy" checked="checked"><label for="tab-xzL6huy">pages/layout.tsx</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Outlet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RootLayout</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Loading...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Outlet</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>&lt;Outlet&gt;</code> is a new API in <strong>React Router 6</strong>. For more details, please refer to <a href="https://reactrouter.com/en/main/components/outlet#outlet" target="_blank" rel="noreferrer">Outlet</a>.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>RootLayout</code> (<code>/pages/layout.tsx</code>) must be use <code>&lt;Suspense&gt;</code> component to wrap <code>&lt;Outlet&gt;</code> component, otherwise it will not work. Because by default, all routes are lazy loaded, and <code>&lt;Suspense&gt;</code> is used to handle lazy loading.</p></div><h2 id="nested-layouts" tabindex="-1">Nested Layouts <a class="header-anchor" href="#nested-layouts" aria-label="Permalink to &quot;Nested Layouts&quot;">​</a></h2><p>To simplify the introduction of the relationship between <code>&lt;Layout&gt;</code> and <code>&lt;Outlet&gt;</code>, the following file directory is used as an example:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">└── pages</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── blog</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── page.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── layout.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── page.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── user</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── layout.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── page.tsx</span></span></code></pre></div><ol><li>When the route is <code>/</code>, the <code>&lt;Outlet&gt;</code> in <code>pages/layout.tsx</code> represents the component exported in <code>pages/page.tsx</code>, generating the following UI structure:</li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Layout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Page</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="2"><li>When the route is <code>/blog</code>, the <code>&lt;Outlet&gt;</code> in <code>pages/layout.tsx</code> represents the component exported in <code>pages/blog/page.tsx</code>, generating the following UI structure:</li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Layout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BlogPage</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="3"><li>When the route is <code>/user</code>, the <code>&lt;Outlet&gt;</code> in <code>pages/layout.tsx</code> represents the component exported in <code>pages/user/layout.tsx</code>. The <code>&lt;Outlet&gt;</code> in <code>pages/user/layout.tsx</code> represents the component exported in <code>pages/user/page.tsx</code>, generating the following UI structure:</li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Layout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UserLayout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UserPage</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">UserLayout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>In summary, if there is a <code>layout.tsx</code> file under the sub-route&#39;s file directory, the <code>&lt;Outlet&gt;</code> in the parent <code>layout.tsx</code> will represent the <code>layout.tsx</code> in the sub-route file directory. Otherwise, it will represent the <code>page.tsx</code> in the sub-route file directory.</p>`,23),l=[n];function p(c,r,i,d,y,u){return e(),a("div",null,l)}const g=s(o,[["render",p]]);export{D as __pageData,g as default};
